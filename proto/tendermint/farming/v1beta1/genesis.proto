syntax = "proto3";

package cosmos.farming.v1beta1;

import "google/protobuf/any.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "tendermint/farming/v1beta1/farming.proto";
import "google/protobuf/timestamp.proto";

option go_package            = "github.com/tendermint/farming/x/farming/types";
option (gogoproto.equal_all) = true;

// GenesisState defines the farming module's genesis state.
message GenesisState {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // params defines all the parameters for the farming module
  Params params = 1 [(gogoproto.nullable) = false];

  // plan_records defines the plan records used for genesis state
  repeated PlanRecord plan_records = 2 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"plan_records\""];

  repeated StakingRecord staking_records = 3
      [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"staking_records\""];

  repeated QueuedStakingRecord queued_staking_records = 4
      [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"queued_staking_records\""];

  repeated HistoricalRewardsRecord historical_rewards_records = 5
      [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"historical_rewards_records\""];

  repeated CurrentEpochRecord current_epoch_records = 6
      [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"current_epoch_records\""];

  // staking_reserve_coins specifies balance of the staking reserve pool staked in the plans
  // this param is needed for import/export validation
  repeated cosmos.base.v1beta1.Coin staking_reserve_coins = 7 [
    (gogoproto.moretags)     = "yaml:\"staking_reserve_coins\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable)     = false
  ];

  // reward_pool_coins specifies balance of the reward pool to be distributed in the plans
  // this param is needed for import/export validation
  repeated cosmos.base.v1beta1.Coin reward_pool_coins = 8 [
    (gogoproto.moretags)     = "yaml:\"reward_pool_coins\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable)     = false
  ];

  // global_last_epoch_time specifies the last executed epoch time of the plans
  google.protobuf.Timestamp global_last_epoch_time = 9 [
    (gogoproto.stdtime)  = true,
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"global_last_epoch_time\""
  ];
}

// PlanRecord is used for import/export via genesis json.
message PlanRecord {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // plan specifies the plan interface; it can be FixedAmountPlan or RatioPlan
  google.protobuf.Any plan = 1 [(gogoproto.nullable) = false, (cosmos_proto.accepts_interface) = "PlanI"];

  // farming_pool_coins specifies balance of the farming pool for the plan
  // this param is needed for import/export validation
  repeated cosmos.base.v1beta1.Coin farming_pool_coins = 2 [
    (gogoproto.moretags)     = "yaml:\"farming_pool_coins\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable)     = false
  ];

  // staking_reserve_coins specifies balance of the staking reserve pool staked
  // in the plan this param is needed for import/export validation
  repeated cosmos.base.v1beta1.Coin staking_reserve_coins = 3 [
    (gogoproto.moretags)     = "yaml:\"staking_reserve_coins\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable)     = false
  ];
}

message StakingRecord {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string staking_coin_denom = 1 [(gogoproto.moretags) = "yaml:\"staking_coin_denom\""];

  string farmer = 2;

  Staking staking = 3 [(gogoproto.nullable) = false];
}

message QueuedStakingRecord {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string staking_coin_denom = 1 [(gogoproto.moretags) = "yaml:\"staking_coin_denom\""];

  string farmer = 2;

  QueuedStaking queued_staking = 3 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"queued_staking\""];
}

message HistoricalRewardsRecord {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string staking_coin_denom = 1 [(gogoproto.moretags) = "yaml:\"staking_coin_denom\""];

  uint64 epoch = 2;

  HistoricalRewards historical_rewards = 3
      [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"historical_rewards\""];
}

message CurrentEpochRecord {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string staking_coin_denom = 1 [(gogoproto.moretags) = "yaml:\"staking_coin_denom\""];

  uint64 current_epoch = 2 [(gogoproto.moretags) = "yaml:\"current_epoch\""];
}
