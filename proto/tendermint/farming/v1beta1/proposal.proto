syntax = "proto3";

package tendermint.farming.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "tendermint/farming/v1beta1/farming.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/tendermint/farming/x/farming/types";

// PublicPlanProposal details a proposal for creating a public plan.
message PublicPlanProposal {
  option (gogoproto.goproto_getters)  = false;
  option (gogoproto.goproto_stringer) = false;

  // title specifies the title of the plan
  string title = 1;

  // description specifies the description of the plan
  string description = 2;

  // name specifies the plan name that describes what plan is for
  string name = 3;

  // add_request_proposals specifies AddRequestProposal object
  repeated AddRequestProposal add_request_proposals = 4 
      [(gogoproto.moretags) = "yaml:\"add_request_proposals\""];

  // update_request_proposals specifies UpdateRequestProposal object
  repeated UpdateRequestProposal update_request_proposals = 5
      [(gogoproto.moretags) = "yaml:\"update_request_proposals\""];

  // delete_request_proposals specifies DeleteRequestProposal object
  repeated DeleteRequestProposal delete_request_proposals = 6
      [(gogoproto.moretags) = "yaml:\"delete_request_proposals\""];
}

// AddRequestProposal details a proposal for creating a public plan.
message AddRequestProposal {
  // farming_pool_address defines the bech32-encoded address of the farming pool
  string farming_pool_address = 1 [(gogoproto.moretags) = "yaml:\"farming_pool_address\""];

  // termination_address defines the bech32-encoded address that terminates plan
  // when the plan ends after the end time, the balance of farming pool address
  // is transferred to the termination address
  string termination_address = 2 [(gogoproto.moretags) = "yaml:\"termination_address\""];

  // staking_coin_weights specifies coin weights for the plan
  repeated cosmos.base.v1beta1.DecCoin staking_coin_weights = 3 [
    (gogoproto.moretags)     = "yaml:\"staking_coin_weights\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.nullable)     = false
  ];

  // start_time specifies the start time of the plan
  google.protobuf.Timestamp start_time = 4
      [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"start_time\""];

  // end_time specifies the end time of the plan
  google.protobuf.Timestamp end_time = 5
      [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"end_time\""];

  // epoch_amount specifies the distributing amount for each epoch
  repeated cosmos.base.v1beta1.Coin epoch_amount = 6 [
    (gogoproto.moretags)     = "yaml:\"epoch_amount\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable)     = false
  ];

 // epoch_ratio specifies the distributing amount by ratio
  string epoch_ratio = 7 [
    (gogoproto.moretags)   = "yaml:\"epoch_ratio\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
}

// UpdateRequestProposal details a proposal for updating an existing public plan.
message UpdateRequestProposal {
  // plan_id specifies index of the farming plan
  uint64 plan_id = 1;

  // farming_pool_address defines the bech32-encoded address of the farming pool
  string farming_pool_address = 2 [(gogoproto.moretags) = "yaml:\"farming_pool_address\""];

  // termination_address defines the bech32-encoded address that terminates plan
  // when the plan ends after the end time, the balance of farming pool address
  // is transferred to the termination address
  string termination_address = 3 [(gogoproto.moretags) = "yaml:\"termination_address\""];

  // staking_coin_weights specifies coin weights for the plan
  repeated cosmos.base.v1beta1.DecCoin staking_coin_weights = 4 [
    (gogoproto.moretags)     = "yaml:\"staking_coin_weights\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.nullable)     = false
  ];

  // start_time specifies the start time of the plan
  google.protobuf.Timestamp start_time = 5
      [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"start_time\""];

  // end_time specifies the end time of the plan
  google.protobuf.Timestamp end_time = 6
      [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"end_time\""];

  // epoch_amount specifies the distributing amount for each epoch
  repeated cosmos.base.v1beta1.Coin epoch_amount = 7 [
    (gogoproto.moretags)     = "yaml:\"epoch_amount\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable)     = false
  ];

 // epoch_ratio specifies the distributing amount by ratio
  string epoch_ratio = 8 [
    (gogoproto.moretags)   = "yaml:\"epoch_ratio\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false
  ];
}

// DeleteRequestProposal details a proposal for deleting an existing public plan.
message DeleteRequestProposal {
  // plan_id specifies index of the farming plan
  uint64 plan_id = 1;
}
