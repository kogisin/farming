// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tendermint/farming/v1beta1/proposal.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PublicPlanProposal defines a public farming plan governance proposal that receives one of the following requests:
// A request that creates a public farming plan, a request that updates the plan, and a reuqest that deletes the plan.
// For public plan creation, depending on which field is passed, either epoch amount or epoch ratio, it creates a fixed amount plan or ratio plan.
type PublicPlanProposal struct {
	// title specifies the title of the plan
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// description specifies the description of the plan
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// add_request_proposals specifies AddRequestProposal object
	AddRequestProposals []*AddRequestProposal `protobuf:"bytes,3,rep,name=add_request_proposals,json=addRequestProposals,proto3" json:"add_request_proposals,omitempty" yaml:"add_request_proposals"`
	// update_request_proposals specifies UpdateRequestProposal object
	UpdateRequestProposals []*UpdateRequestProposal `protobuf:"bytes,4,rep,name=update_request_proposals,json=updateRequestProposals,proto3" json:"update_request_proposals,omitempty" yaml:"update_request_proposals"`
	// delete_request_proposals specifies DeleteRequestProposal object
	DeleteRequestProposals []*DeleteRequestProposal `protobuf:"bytes,5,rep,name=delete_request_proposals,json=deleteRequestProposals,proto3" json:"delete_request_proposals,omitempty" yaml:"delete_request_proposals"`
}

func (m *PublicPlanProposal) Reset()      { *m = PublicPlanProposal{} }
func (*PublicPlanProposal) ProtoMessage() {}
func (*PublicPlanProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_4719b03c30c7910a, []int{0}
}
func (m *PublicPlanProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublicPlanProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublicPlanProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublicPlanProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicPlanProposal.Merge(m, src)
}
func (m *PublicPlanProposal) XXX_Size() int {
	return m.Size()
}
func (m *PublicPlanProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicPlanProposal.DiscardUnknown(m)
}

var xxx_messageInfo_PublicPlanProposal proto.InternalMessageInfo

// AddRequestProposal details a proposal for creating a public plan.
type AddRequestProposal struct {
	// name specifies the plan name that describes what plan is for
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// farming_pool_address defines the bech32-encoded address of the farming pool
	FarmingPoolAddress string `protobuf:"bytes,2,opt,name=farming_pool_address,json=farmingPoolAddress,proto3" json:"farming_pool_address,omitempty" yaml:"farming_pool_address"`
	// termination_address defines the bech32-encoded address that terminates plan
	// when the plan ends after the end time, the balance of farming pool address
	// is transferred to the termination address
	TerminationAddress string `protobuf:"bytes,3,opt,name=termination_address,json=terminationAddress,proto3" json:"termination_address,omitempty" yaml:"termination_address"`
	// staking_coin_weights specifies coin weights for the plan
	StakingCoinWeights github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,4,rep,name=staking_coin_weights,json=stakingCoinWeights,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"staking_coin_weights" yaml:"staking_coin_weights"`
	// start_time specifies the start time of the plan
	StartTime time.Time `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"start_time"`
	// end_time specifies the end time of the plan
	EndTime time.Time `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time" yaml:"end_time"`
	// epoch_amount specifies the distributing amount for each epoch
	EpochAmount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=epoch_amount,json=epochAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"epoch_amount" yaml:"epoch_amount"`
	// epoch_ratio specifies the distributing amount by ratio
	EpochRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=epoch_ratio,json=epochRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"epoch_ratio" yaml:"epoch_ratio"`
}

func (m *AddRequestProposal) Reset()         { *m = AddRequestProposal{} }
func (m *AddRequestProposal) String() string { return proto.CompactTextString(m) }
func (*AddRequestProposal) ProtoMessage()    {}
func (*AddRequestProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_4719b03c30c7910a, []int{1}
}
func (m *AddRequestProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddRequestProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddRequestProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddRequestProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRequestProposal.Merge(m, src)
}
func (m *AddRequestProposal) XXX_Size() int {
	return m.Size()
}
func (m *AddRequestProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRequestProposal.DiscardUnknown(m)
}

var xxx_messageInfo_AddRequestProposal proto.InternalMessageInfo

func (m *AddRequestProposal) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddRequestProposal) GetFarmingPoolAddress() string {
	if m != nil {
		return m.FarmingPoolAddress
	}
	return ""
}

func (m *AddRequestProposal) GetTerminationAddress() string {
	if m != nil {
		return m.TerminationAddress
	}
	return ""
}

func (m *AddRequestProposal) GetStakingCoinWeights() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.StakingCoinWeights
	}
	return nil
}

func (m *AddRequestProposal) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *AddRequestProposal) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

func (m *AddRequestProposal) GetEpochAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.EpochAmount
	}
	return nil
}

// UpdateRequestProposal details a proposal for updating an existing public plan.
type UpdateRequestProposal struct {
	// plan_id specifies index of the farming plan
	PlanId uint64 `protobuf:"varint,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	// farming_pool_address defines the bech32-encoded address of the farming pool
	FarmingPoolAddress string `protobuf:"bytes,2,opt,name=farming_pool_address,json=farmingPoolAddress,proto3" json:"farming_pool_address,omitempty" yaml:"farming_pool_address"`
	// termination_address defines the bech32-encoded address that terminates plan
	// when the plan ends after the end time, the balance of farming pool address
	// is transferred to the termination address
	TerminationAddress string `protobuf:"bytes,3,opt,name=termination_address,json=terminationAddress,proto3" json:"termination_address,omitempty" yaml:"termination_address"`
	// staking_coin_weights specifies coin weights for the plan
	StakingCoinWeights github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,4,rep,name=staking_coin_weights,json=stakingCoinWeights,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"staking_coin_weights" yaml:"staking_coin_weights"`
	// start_time specifies the start time of the plan
	StartTime time.Time `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"start_time"`
	// end_time specifies the end time of the plan
	EndTime time.Time `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time" yaml:"end_time"`
	// epoch_amount specifies the distributing amount for each epoch
	EpochAmount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=epoch_amount,json=epochAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"epoch_amount" yaml:"epoch_amount"`
	// epoch_ratio specifies the distributing amount by ratio
	EpochRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=epoch_ratio,json=epochRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"epoch_ratio" yaml:"epoch_ratio"`
}

func (m *UpdateRequestProposal) Reset()         { *m = UpdateRequestProposal{} }
func (m *UpdateRequestProposal) String() string { return proto.CompactTextString(m) }
func (*UpdateRequestProposal) ProtoMessage()    {}
func (*UpdateRequestProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_4719b03c30c7910a, []int{2}
}
func (m *UpdateRequestProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateRequestProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateRequestProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateRequestProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRequestProposal.Merge(m, src)
}
func (m *UpdateRequestProposal) XXX_Size() int {
	return m.Size()
}
func (m *UpdateRequestProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRequestProposal.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRequestProposal proto.InternalMessageInfo

func (m *UpdateRequestProposal) GetPlanId() uint64 {
	if m != nil {
		return m.PlanId
	}
	return 0
}

func (m *UpdateRequestProposal) GetFarmingPoolAddress() string {
	if m != nil {
		return m.FarmingPoolAddress
	}
	return ""
}

func (m *UpdateRequestProposal) GetTerminationAddress() string {
	if m != nil {
		return m.TerminationAddress
	}
	return ""
}

func (m *UpdateRequestProposal) GetStakingCoinWeights() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.StakingCoinWeights
	}
	return nil
}

func (m *UpdateRequestProposal) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *UpdateRequestProposal) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

func (m *UpdateRequestProposal) GetEpochAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.EpochAmount
	}
	return nil
}

// DeleteRequestProposal details a proposal for deleting an existing public plan.
type DeleteRequestProposal struct {
	// plan_id specifies index of the farming plan
	PlanId uint64 `protobuf:"varint,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
}

func (m *DeleteRequestProposal) Reset()         { *m = DeleteRequestProposal{} }
func (m *DeleteRequestProposal) String() string { return proto.CompactTextString(m) }
func (*DeleteRequestProposal) ProtoMessage()    {}
func (*DeleteRequestProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_4719b03c30c7910a, []int{3}
}
func (m *DeleteRequestProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRequestProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRequestProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRequestProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRequestProposal.Merge(m, src)
}
func (m *DeleteRequestProposal) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRequestProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRequestProposal.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRequestProposal proto.InternalMessageInfo

func (m *DeleteRequestProposal) GetPlanId() uint64 {
	if m != nil {
		return m.PlanId
	}
	return 0
}

func init() {
	proto.RegisterType((*PublicPlanProposal)(nil), "tendermint.farming.v1beta1.PublicPlanProposal")
	proto.RegisterType((*AddRequestProposal)(nil), "tendermint.farming.v1beta1.AddRequestProposal")
	proto.RegisterType((*UpdateRequestProposal)(nil), "tendermint.farming.v1beta1.UpdateRequestProposal")
	proto.RegisterType((*DeleteRequestProposal)(nil), "tendermint.farming.v1beta1.DeleteRequestProposal")
}

func init() {
	proto.RegisterFile("tendermint/farming/v1beta1/proposal.proto", fileDescriptor_4719b03c30c7910a)
}

var fileDescriptor_4719b03c30c7910a = []byte{
	// 739 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xc1, 0x4f, 0xdb, 0x3c,
	0x1c, 0x6d, 0x3e, 0x4a, 0x01, 0xf7, 0x93, 0x3e, 0x7d, 0xa6, 0xb0, 0x52, 0x58, 0x52, 0x65, 0xd2,
	0xd4, 0x69, 0x22, 0x19, 0xec, 0xc6, 0x8d, 0x0e, 0x09, 0xed, 0xb4, 0xce, 0xda, 0xb4, 0x69, 0x97,
	0xc8, 0xad, 0x4d, 0x89, 0x48, 0xe2, 0x2c, 0x76, 0xb7, 0x71, 0xde, 0x26, 0xed, 0x34, 0x71, 0x9a,
	0x76, 0x44, 0x3b, 0xee, 0x2f, 0xe1, 0xc8, 0x71, 0xda, 0x21, 0x4c, 0xf0, 0x1f, 0xf4, 0x2f, 0x98,
	0x62, 0x3b, 0xa5, 0x1a, 0x29, 0x70, 0x1f, 0xa7, 0xf8, 0x67, 0xff, 0xde, 0xf3, 0xf3, 0xb3, 0x1f,
	0x14, 0xdc, 0x13, 0x34, 0x22, 0x34, 0x09, 0xfd, 0x48, 0xb8, 0x3b, 0x38, 0xfb, 0xf6, 0xdd, 0x37,
	0x6b, 0x5d, 0x2a, 0xf0, 0x9a, 0x1b, 0x27, 0x2c, 0x66, 0x1c, 0x07, 0x4e, 0x9c, 0x30, 0xc1, 0x60,
	0xe3, 0xbc, 0xd5, 0xd1, 0xad, 0x8e, 0x6e, 0x6d, 0xd4, 0xfa, 0xac, 0xcf, 0x64, 0x9b, 0x9b, 0x8d,
	0x14, 0xa2, 0xb1, 0xd4, 0x63, 0x3c, 0x64, 0xdc, 0x53, 0x0b, 0xaa, 0xd0, 0x4b, 0xa6, 0xaa, 0xdc,
	0x2e, 0xe6, 0x74, 0xb4, 0x61, 0x8f, 0xf9, 0x91, 0x5e, 0x6f, 0x5d, 0xa2, 0x2b, 0xdf, 0x5c, 0x75,
	0x5a, 0x7d, 0xc6, 0xfa, 0x01, 0x75, 0x65, 0xd5, 0x1d, 0xec, 0xb8, 0xc2, 0x0f, 0x29, 0x17, 0x38,
	0x8c, 0x55, 0x83, 0xfd, 0xbe, 0x0c, 0x60, 0x67, 0xd0, 0x0d, 0xfc, 0x5e, 0x27, 0xc0, 0x51, 0x47,
	0x1f, 0x0a, 0xd6, 0xc0, 0xb4, 0xf0, 0x45, 0x40, 0xeb, 0x46, 0xd3, 0x68, 0xcd, 0x21, 0x55, 0xc0,
	0x26, 0xa8, 0x12, 0xca, 0x7b, 0x89, 0x1f, 0x0b, 0x9f, 0x45, 0xf5, 0x7f, 0xe4, 0xda, 0xf8, 0x14,
	0xfc, 0x60, 0x80, 0x05, 0x4c, 0x88, 0x97, 0xd0, 0xd7, 0x03, 0xca, 0x85, 0x97, 0xbb, 0xc4, 0xeb,
	0x53, 0xcd, 0xa9, 0x56, 0x75, 0xdd, 0x71, 0x26, 0xfb, 0xe4, 0x6c, 0x12, 0x82, 0x14, 0x2e, 0xd7,
	0xd1, 0x6e, 0x0e, 0x53, 0x6b, 0x65, 0x1f, 0x87, 0xc1, 0x86, 0x5d, 0x48, 0x6b, 0xa3, 0x79, 0x7c,
	0x01, 0xc5, 0xe1, 0x81, 0x01, 0xea, 0x83, 0x98, 0x60, 0x41, 0x0b, 0x94, 0x94, 0xa5, 0x92, 0xb5,
	0xcb, 0x94, 0x3c, 0x97, 0xd8, 0x3f, 0xc5, 0xdc, 0x19, 0xa6, 0x96, 0xa5, 0xc4, 0x4c, 0x22, 0xb7,
	0xd1, 0xe2, 0xa0, 0x08, 0xab, 0x24, 0x11, 0x1a, 0xd0, 0x42, 0x49, 0xd3, 0x57, 0x4b, 0xda, 0x92,
	0xd8, 0x4b, 0x24, 0x4d, 0x22, 0xb7, 0xd1, 0x22, 0x29, 0xc2, 0xf2, 0x8d, 0xd9, 0x4f, 0x87, 0x56,
	0xe9, 0xeb, 0xa1, 0x55, 0xb2, 0x3f, 0x57, 0x00, 0xbc, 0xe8, 0x3e, 0x84, 0xa0, 0x1c, 0xe1, 0x30,
	0x7f, 0x04, 0x72, 0x0c, 0x9f, 0x82, 0x9a, 0x96, 0xe6, 0xc5, 0x8c, 0x05, 0x1e, 0x26, 0x24, 0xa1,
	0x9c, 0xab, 0xc7, 0xd0, 0xb6, 0x86, 0xa9, 0xb5, 0xac, 0xf4, 0x14, 0x75, 0xd9, 0x08, 0xea, 0xe9,
	0x0e, 0x63, 0xc1, 0xa6, 0x9a, 0x84, 0x4f, 0xc0, 0xbc, 0x90, 0xa7, 0xc6, 0xd9, 0x1b, 0x1a, 0x31,
	0x4e, 0x49, 0x46, 0x73, 0x98, 0x5a, 0x0d, 0xc5, 0x58, 0xd0, 0x64, 0x23, 0x38, 0x36, 0x9b, 0x13,
	0x7e, 0x33, 0x40, 0x8d, 0x0b, 0xbc, 0x97, 0x6d, 0x9f, 0xc5, 0xc6, 0x7b, 0x4b, 0xfd, 0xfe, 0xae,
	0xc8, 0xaf, 0x7e, 0xc5, 0xd1, 0x69, 0xcb, 0xf2, 0x35, 0x66, 0x70, 0xef, 0x11, 0xf3, 0xa3, 0x36,
	0x3a, 0x4a, 0xad, 0xd2, 0xf9, 0x31, 0x8a, 0x78, 0xec, 0xef, 0x27, 0xd6, 0xfd, 0xbe, 0x2f, 0x76,
	0x07, 0x5d, 0xa7, 0xc7, 0x42, 0x1d, 0x5e, 0xfd, 0x59, 0xe5, 0x64, 0xcf, 0x15, 0xfb, 0x31, 0xe5,
	0x39, 0x25, 0x47, 0x50, 0xb3, 0x64, 0xd5, 0x0b, 0xc5, 0x01, 0x5f, 0x02, 0xc0, 0x05, 0x4e, 0x84,
	0x97, 0x45, 0xb2, 0x3e, 0xdd, 0x34, 0x5a, 0xd5, 0xf5, 0x86, 0xa3, 0xf2, 0xea, 0xe4, 0x79, 0x75,
	0x9e, 0xe5, 0x79, 0x6d, 0xdf, 0xd6, 0xba, 0xfe, 0x1f, 0xe9, 0xd2, 0x58, 0xfb, 0xe0, 0xc4, 0x32,
	0xd0, 0x9c, 0x9c, 0xc8, 0xda, 0x21, 0x02, 0xb3, 0x34, 0x22, 0x8a, 0xb7, 0x72, 0x25, 0xef, 0xb2,
	0xe6, 0xfd, 0x4f, 0xf1, 0xe6, 0x48, 0xc5, 0x3a, 0x43, 0x23, 0x22, 0x39, 0x3f, 0x1a, 0xe0, 0x5f,
	0x1a, 0xb3, 0xde, 0xae, 0x87, 0x43, 0x36, 0x88, 0x44, 0x7d, 0x46, 0x5a, 0xb9, 0x54, 0x68, 0xa5,
	0xf4, 0x71, 0x5b, 0xf3, 0xce, 0x6b, 0xde, 0x31, 0x70, 0xe6, 0x5f, 0xeb, 0x1a, 0xfe, 0x29, 0xf3,
	0xaa, 0x12, 0xba, 0x29, 0x91, 0x90, 0x02, 0x55, 0x7a, 0x49, 0x76, 0xe3, 0xf5, 0x59, 0xf9, 0x46,
	0xb6, 0xb2, 0xad, 0x7e, 0xa6, 0xd6, 0xdd, 0xeb, 0xdd, 0xc9, 0x30, 0xb5, 0xe0, 0xb8, 0x28, 0x49,
	0x65, 0x23, 0x20, 0x2b, 0x24, 0x8b, 0x2f, 0x15, 0xb0, 0x50, 0xf8, 0x47, 0x00, 0xde, 0x02, 0x33,
	0x71, 0x80, 0x23, 0xcf, 0x27, 0x32, 0x16, 0x65, 0x54, 0xc9, 0xca, 0xc7, 0xe4, 0x26, 0x18, 0x37,
	0xc1, 0xf8, 0x0b, 0x82, 0xf1, 0x00, 0x2c, 0x14, 0xfe, 0x27, 0x9a, 0x98, 0x8b, 0xf6, 0xf6, 0xd1,
	0xa9, 0x69, 0x1c, 0x9f, 0x9a, 0xc6, 0xaf, 0x53, 0xd3, 0x38, 0x38, 0x33, 0x4b, 0xc7, 0x67, 0x66,
	0xe9, 0xc7, 0x99, 0x59, 0x7a, 0xb5, 0x3a, 0xa6, 0xaa, 0xe0, 0x17, 0xcd, 0xbb, 0xd1, 0x48, 0x0a,
	0xec, 0x56, 0xe4, 0x1d, 0x3d, 0xfc, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x24, 0xaa, 0xa2, 0xb3, 0x96,
	0x09, 0x00, 0x00,
}

func (m *PublicPlanProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicPlanProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublicPlanProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeleteRequestProposals) > 0 {
		for iNdEx := len(m.DeleteRequestProposals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DeleteRequestProposals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProposal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.UpdateRequestProposals) > 0 {
		for iNdEx := len(m.UpdateRequestProposals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UpdateRequestProposals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProposal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.AddRequestProposals) > 0 {
		for iNdEx := len(m.AddRequestProposals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AddRequestProposals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProposal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddRequestProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddRequestProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddRequestProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.EpochRatio.Size()
		i -= size
		if _, err := m.EpochRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.EpochAmount) > 0 {
		for iNdEx := len(m.EpochAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EpochAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProposal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintProposal(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintProposal(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x2a
	if len(m.StakingCoinWeights) > 0 {
		for iNdEx := len(m.StakingCoinWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakingCoinWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProposal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TerminationAddress) > 0 {
		i -= len(m.TerminationAddress)
		copy(dAtA[i:], m.TerminationAddress)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.TerminationAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FarmingPoolAddress) > 0 {
		i -= len(m.FarmingPoolAddress)
		copy(dAtA[i:], m.FarmingPoolAddress)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.FarmingPoolAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateRequestProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRequestProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateRequestProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.EpochRatio.Size()
		i -= size
		if _, err := m.EpochRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.EpochAmount) > 0 {
		for iNdEx := len(m.EpochAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EpochAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProposal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintProposal(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x32
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintProposal(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x2a
	if len(m.StakingCoinWeights) > 0 {
		for iNdEx := len(m.StakingCoinWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakingCoinWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProposal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TerminationAddress) > 0 {
		i -= len(m.TerminationAddress)
		copy(dAtA[i:], m.TerminationAddress)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.TerminationAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FarmingPoolAddress) > 0 {
		i -= len(m.FarmingPoolAddress)
		copy(dAtA[i:], m.FarmingPoolAddress)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.FarmingPoolAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.PlanId != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.PlanId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteRequestProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRequestProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRequestProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlanId != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.PlanId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PublicPlanProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if len(m.AddRequestProposals) > 0 {
		for _, e := range m.AddRequestProposals {
			l = e.Size()
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	if len(m.UpdateRequestProposals) > 0 {
		for _, e := range m.UpdateRequestProposals {
			l = e.Size()
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	if len(m.DeleteRequestProposals) > 0 {
		for _, e := range m.DeleteRequestProposals {
			l = e.Size()
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	return n
}

func (m *AddRequestProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.FarmingPoolAddress)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.TerminationAddress)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if len(m.StakingCoinWeights) > 0 {
		for _, e := range m.StakingCoinWeights {
			l = e.Size()
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovProposal(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovProposal(uint64(l))
	if len(m.EpochAmount) > 0 {
		for _, e := range m.EpochAmount {
			l = e.Size()
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	l = m.EpochRatio.Size()
	n += 1 + l + sovProposal(uint64(l))
	return n
}

func (m *UpdateRequestProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlanId != 0 {
		n += 1 + sovProposal(uint64(m.PlanId))
	}
	l = len(m.FarmingPoolAddress)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.TerminationAddress)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if len(m.StakingCoinWeights) > 0 {
		for _, e := range m.StakingCoinWeights {
			l = e.Size()
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovProposal(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovProposal(uint64(l))
	if len(m.EpochAmount) > 0 {
		for _, e := range m.EpochAmount {
			l = e.Size()
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	l = m.EpochRatio.Size()
	n += 1 + l + sovProposal(uint64(l))
	return n
}

func (m *DeleteRequestProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlanId != 0 {
		n += 1 + sovProposal(uint64(m.PlanId))
	}
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PublicPlanProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublicPlanProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublicPlanProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddRequestProposals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddRequestProposals = append(m.AddRequestProposals, &AddRequestProposal{})
			if err := m.AddRequestProposals[len(m.AddRequestProposals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateRequestProposals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateRequestProposals = append(m.UpdateRequestProposals, &UpdateRequestProposal{})
			if err := m.UpdateRequestProposals[len(m.UpdateRequestProposals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteRequestProposals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeleteRequestProposals = append(m.DeleteRequestProposals, &DeleteRequestProposal{})
			if err := m.DeleteRequestProposals[len(m.DeleteRequestProposals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddRequestProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddRequestProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddRequestProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmingPoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FarmingPoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TerminationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingCoinWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingCoinWeights = append(m.StakingCoinWeights, types.DecCoin{})
			if err := m.StakingCoinWeights[len(m.StakingCoinWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochAmount = append(m.EpochAmount, types.Coin{})
			if err := m.EpochAmount[len(m.EpochAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRequestProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRequestProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRequestProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
			}
			m.PlanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmingPoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FarmingPoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TerminationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingCoinWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingCoinWeights = append(m.StakingCoinWeights, types.DecCoin{})
			if err := m.StakingCoinWeights[len(m.StakingCoinWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochAmount = append(m.EpochAmount, types.Coin{})
			if err := m.EpochAmount[len(m.EpochAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRequestProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRequestProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRequestProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
			}
			m.PlanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
