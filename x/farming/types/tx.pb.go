// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tendermint/farming/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateFixedAmountPlan defines a SDK message for creating a new fixed
// amount farming plan.
type MsgCreateFixedAmountPlan struct {
	// farming_pool_address defines the bech32-encoded address of the farming pool
	FarmingPoolAddress string `protobuf:"bytes,1,opt,name=farming_pool_address,json=farmingPoolAddress,proto3" json:"farming_pool_address,omitempty" yaml:"farming_pool_address"`
	// staking_coin_weights specifies coins weight for the plan
	StakingCoinWeights github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,2,rep,name=staking_coin_weights,json=stakingCoinWeights,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"staking_coin_weights" yaml:"staking_coin_weights"`
	// start_time specifies the start time of the plan
	StartTime time.Time `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"start_time"`
	// end_time specifies the end time of the plan
	EndTime time.Time `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time" yaml:"end_time"`
	// epoch_amount specifies the distributing amount for each epoch
	EpochAmount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=epoch_amount,json=epochAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"epoch_amount" yaml:"epoch_amount"`
}

func (m *MsgCreateFixedAmountPlan) Reset()         { *m = MsgCreateFixedAmountPlan{} }
func (m *MsgCreateFixedAmountPlan) String() string { return proto.CompactTextString(m) }
func (*MsgCreateFixedAmountPlan) ProtoMessage()    {}
func (*MsgCreateFixedAmountPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_a33d9a3ff13f514a, []int{0}
}
func (m *MsgCreateFixedAmountPlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateFixedAmountPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateFixedAmountPlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateFixedAmountPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateFixedAmountPlan.Merge(m, src)
}
func (m *MsgCreateFixedAmountPlan) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateFixedAmountPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateFixedAmountPlan.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateFixedAmountPlan proto.InternalMessageInfo

// MsgCreateFixedAmountPlanResponse defines the
// Msg/CreateFixedAmountPlanResponse response type.
type MsgCreateFixedAmountPlanResponse struct {
}

func (m *MsgCreateFixedAmountPlanResponse) Reset()         { *m = MsgCreateFixedAmountPlanResponse{} }
func (m *MsgCreateFixedAmountPlanResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateFixedAmountPlanResponse) ProtoMessage()    {}
func (*MsgCreateFixedAmountPlanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a33d9a3ff13f514a, []int{1}
}
func (m *MsgCreateFixedAmountPlanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateFixedAmountPlanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateFixedAmountPlanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateFixedAmountPlanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateFixedAmountPlanResponse.Merge(m, src)
}
func (m *MsgCreateFixedAmountPlanResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateFixedAmountPlanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateFixedAmountPlanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateFixedAmountPlanResponse proto.InternalMessageInfo

// MsgCreateRatioPlan defines a SDK message for creating a new ratio farming
// plan.
type MsgCreateRatioPlan struct {
	// farming_pool_address defines the bech32-encoded address of the farming pool
	FarmingPoolAddress string `protobuf:"bytes,1,opt,name=farming_pool_address,json=farmingPoolAddress,proto3" json:"farming_pool_address,omitempty" yaml:"farming_pool_address"`
	// staking_coin_weights specifies coins weight for the plan
	StakingCoinWeights github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,2,rep,name=staking_coin_weights,json=stakingCoinWeights,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"staking_coin_weights" yaml:"staking_coin_weights"`
	// start_time specifies the start time of the plan
	StartTime time.Time `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"start_time"`
	// end_time specifies the end time of the plan
	EndTime time.Time `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time" yaml:"end_time"`
	// epoch_ratio specifies the distributing amount by ratio
	EpochRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=epoch_ratio,json=epochRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"epoch_ratio" yaml:"epoch_ratio"`
}

func (m *MsgCreateRatioPlan) Reset()         { *m = MsgCreateRatioPlan{} }
func (m *MsgCreateRatioPlan) String() string { return proto.CompactTextString(m) }
func (*MsgCreateRatioPlan) ProtoMessage()    {}
func (*MsgCreateRatioPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_a33d9a3ff13f514a, []int{2}
}
func (m *MsgCreateRatioPlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateRatioPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateRatioPlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateRatioPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateRatioPlan.Merge(m, src)
}
func (m *MsgCreateRatioPlan) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateRatioPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateRatioPlan.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateRatioPlan proto.InternalMessageInfo

// MsgCreateRatioPlanResponse  defines the Msg/MsgCreateRatioPlanResponse
// response type.
type MsgCreateRatioPlanResponse struct {
}

func (m *MsgCreateRatioPlanResponse) Reset()         { *m = MsgCreateRatioPlanResponse{} }
func (m *MsgCreateRatioPlanResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateRatioPlanResponse) ProtoMessage()    {}
func (*MsgCreateRatioPlanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a33d9a3ff13f514a, []int{3}
}
func (m *MsgCreateRatioPlanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateRatioPlanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateRatioPlanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateRatioPlanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateRatioPlanResponse.Merge(m, src)
}
func (m *MsgCreateRatioPlanResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateRatioPlanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateRatioPlanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateRatioPlanResponse proto.InternalMessageInfo

// MsgStake defines a SDK message for staking coins into the farming plan.
type MsgStake struct {
	// farmer defines the bech32-encoded address of the farmer
	Farmer string `protobuf:"bytes,1,opt,name=farmer,proto3" json:"farmer,omitempty"`
	// staking_coins specifies coins to stake
	StakingCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=staking_coins,json=stakingCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"staking_coins" yaml:"staking_coins"`
}

func (m *MsgStake) Reset()         { *m = MsgStake{} }
func (m *MsgStake) String() string { return proto.CompactTextString(m) }
func (*MsgStake) ProtoMessage()    {}
func (*MsgStake) Descriptor() ([]byte, []int) {
	return fileDescriptor_a33d9a3ff13f514a, []int{4}
}
func (m *MsgStake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStake.Merge(m, src)
}
func (m *MsgStake) XXX_Size() int {
	return m.Size()
}
func (m *MsgStake) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStake.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStake proto.InternalMessageInfo

// MsgStakeResponse  defines the Msg/MsgStakeResponse response type.
type MsgStakeResponse struct {
}

func (m *MsgStakeResponse) Reset()         { *m = MsgStakeResponse{} }
func (m *MsgStakeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgStakeResponse) ProtoMessage()    {}
func (*MsgStakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a33d9a3ff13f514a, []int{5}
}
func (m *MsgStakeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStakeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStakeResponse.Merge(m, src)
}
func (m *MsgStakeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgStakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStakeResponse proto.InternalMessageInfo

// MsgUnstake defines a SDK message for performing unstaking of coins from the
// farming plan.
type MsgUnstake struct {
	// farmer defines the bech32-encoded address of the farmer
	Farmer string `protobuf:"bytes,1,opt,name=farmer,proto3" json:"farmer,omitempty"`
	// unstaking_coins specifies coins to stake
	UnstakingCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=unstaking_coins,json=unstakingCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"unstaking_coins" yaml:"unstaking_coins"`
}

func (m *MsgUnstake) Reset()         { *m = MsgUnstake{} }
func (m *MsgUnstake) String() string { return proto.CompactTextString(m) }
func (*MsgUnstake) ProtoMessage()    {}
func (*MsgUnstake) Descriptor() ([]byte, []int) {
	return fileDescriptor_a33d9a3ff13f514a, []int{6}
}
func (m *MsgUnstake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnstake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnstake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnstake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnstake.Merge(m, src)
}
func (m *MsgUnstake) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnstake) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnstake.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnstake proto.InternalMessageInfo

// MsgUnstakeResponse defines the Msg/MsgUnstakeResponse response type.
type MsgUnstakeResponse struct {
}

func (m *MsgUnstakeResponse) Reset()         { *m = MsgUnstakeResponse{} }
func (m *MsgUnstakeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnstakeResponse) ProtoMessage()    {}
func (*MsgUnstakeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a33d9a3ff13f514a, []int{7}
}
func (m *MsgUnstakeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnstakeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnstakeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnstakeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnstakeResponse.Merge(m, src)
}
func (m *MsgUnstakeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnstakeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnstakeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnstakeResponse proto.InternalMessageInfo

// MsgHarvest defines a SDK message for claiming rewards from the farming plan.
type MsgHarvest struct {
	// farmer defines the bech32-encoded address of the farmer
	Farmer string `protobuf:"bytes,1,opt,name=farmer,proto3" json:"farmer,omitempty"`
	// staking_coin_denoms is the set of denoms of staked coins as a source of the reward for
	// harvesting
	StakingCoinDenoms []string `protobuf:"bytes,2,rep,name=staking_coin_denoms,json=stakingCoinDenoms,proto3" json:"staking_coin_denoms,omitempty" yaml:"staking_coin_denoms"`
}

func (m *MsgHarvest) Reset()         { *m = MsgHarvest{} }
func (m *MsgHarvest) String() string { return proto.CompactTextString(m) }
func (*MsgHarvest) ProtoMessage()    {}
func (*MsgHarvest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a33d9a3ff13f514a, []int{8}
}
func (m *MsgHarvest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgHarvest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgHarvest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgHarvest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgHarvest.Merge(m, src)
}
func (m *MsgHarvest) XXX_Size() int {
	return m.Size()
}
func (m *MsgHarvest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgHarvest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgHarvest proto.InternalMessageInfo

// MsgHarvestResponse defines the Msg/MsgHarvestResponse response type.
type MsgHarvestResponse struct {
}

func (m *MsgHarvestResponse) Reset()         { *m = MsgHarvestResponse{} }
func (m *MsgHarvestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgHarvestResponse) ProtoMessage()    {}
func (*MsgHarvestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a33d9a3ff13f514a, []int{9}
}
func (m *MsgHarvestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgHarvestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgHarvestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgHarvestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgHarvestResponse.Merge(m, src)
}
func (m *MsgHarvestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgHarvestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgHarvestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgHarvestResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateFixedAmountPlan)(nil), "cosmos.farming.v1beta1.MsgCreateFixedAmountPlan")
	proto.RegisterType((*MsgCreateFixedAmountPlanResponse)(nil), "cosmos.farming.v1beta1.MsgCreateFixedAmountPlanResponse")
	proto.RegisterType((*MsgCreateRatioPlan)(nil), "cosmos.farming.v1beta1.MsgCreateRatioPlan")
	proto.RegisterType((*MsgCreateRatioPlanResponse)(nil), "cosmos.farming.v1beta1.MsgCreateRatioPlanResponse")
	proto.RegisterType((*MsgStake)(nil), "cosmos.farming.v1beta1.MsgStake")
	proto.RegisterType((*MsgStakeResponse)(nil), "cosmos.farming.v1beta1.MsgStakeResponse")
	proto.RegisterType((*MsgUnstake)(nil), "cosmos.farming.v1beta1.MsgUnstake")
	proto.RegisterType((*MsgUnstakeResponse)(nil), "cosmos.farming.v1beta1.MsgUnstakeResponse")
	proto.RegisterType((*MsgHarvest)(nil), "cosmos.farming.v1beta1.MsgHarvest")
	proto.RegisterType((*MsgHarvestResponse)(nil), "cosmos.farming.v1beta1.MsgHarvestResponse")
}

func init() {
	proto.RegisterFile("tendermint/farming/v1beta1/tx.proto", fileDescriptor_a33d9a3ff13f514a)
}

var fileDescriptor_a33d9a3ff13f514a = []byte{
	// 794 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0x4f, 0x4f, 0xd4, 0x4e,
	0x18, 0xde, 0xfe, 0x58, 0xfe, 0x0d, 0xfc, 0x44, 0xca, 0x4a, 0x96, 0x82, 0xed, 0xa6, 0x26, 0x66,
	0x83, 0xa1, 0x95, 0xf5, 0x62, 0xb8, 0xb1, 0x10, 0x21, 0x26, 0x6b, 0xb0, 0x68, 0xfc, 0x73, 0xd9,
	0xcc, 0x6e, 0x87, 0xd2, 0xb0, 0xed, 0xac, 0x9d, 0x59, 0x04, 0xaf, 0xc6, 0x04, 0x2f, 0x86, 0x8f,
	0x60, 0xbc, 0x98, 0x78, 0xf5, 0xe8, 0x17, 0xe0, 0x64, 0x38, 0x1a, 0x0f, 0x8b, 0x81, 0x6f, 0xc0,
	0x27, 0x30, 0x9d, 0x99, 0xd6, 0x02, 0x65, 0x97, 0x3d, 0x9a, 0x78, 0xda, 0xce, 0xf4, 0x79, 0x9f,
	0x79, 0xdf, 0xe7, 0x7d, 0xde, 0xe9, 0x82, 0x5b, 0x14, 0xf9, 0x36, 0x0a, 0x3c, 0xd7, 0xa7, 0xe6,
	0x06, 0x0c, 0x7f, 0x1d, 0x73, 0x7b, 0xbe, 0x86, 0x28, 0x9c, 0x37, 0xe9, 0x8e, 0xd1, 0x0c, 0x30,
	0xc5, 0xf2, 0x64, 0x1d, 0x13, 0x0f, 0x13, 0x43, 0x00, 0x0c, 0x01, 0x50, 0x72, 0x0e, 0x76, 0x30,
	0x83, 0x98, 0xe1, 0x13, 0x47, 0x2b, 0x53, 0x1c, 0x5d, 0xe5, 0x2f, 0x44, 0x28, 0x7f, 0xa5, 0xf2,
	0x95, 0x59, 0x83, 0x04, 0xc5, 0xc7, 0xd4, 0xb1, 0xeb, 0x8b, 0xf7, 0x9a, 0x83, 0xb1, 0xd3, 0x40,
	0x26, 0x5b, 0xd5, 0x5a, 0x1b, 0x26, 0x75, 0x3d, 0x44, 0x28, 0xf4, 0x9a, 0x1c, 0xa0, 0x7f, 0xcf,
	0x82, 0x7c, 0x85, 0x38, 0x4b, 0x01, 0x82, 0x14, 0x3d, 0x70, 0x77, 0x90, 0xbd, 0xe8, 0xe1, 0x96,
	0x4f, 0xd7, 0x1a, 0xd0, 0x97, 0x1f, 0x83, 0x9c, 0xc8, 0xb0, 0xda, 0xc4, 0xb8, 0x51, 0x85, 0xb6,
	0x1d, 0x20, 0x42, 0xf2, 0x52, 0x41, 0x2a, 0x0e, 0x97, 0xb5, 0xd3, 0xb6, 0x36, 0xbd, 0x0b, 0xbd,
	0xc6, 0x82, 0x9e, 0x86, 0xd2, 0x2d, 0x59, 0x6c, 0xaf, 0x61, 0xdc, 0x58, 0xe4, 0x9b, 0xf2, 0x27,
	0x09, 0xe4, 0x08, 0x85, 0x5b, 0x21, 0x3a, 0xcc, 0xb3, 0xfa, 0x1a, 0xb9, 0xce, 0x26, 0x25, 0xf9,
	0xff, 0x0a, 0x7d, 0xc5, 0x91, 0xd2, 0x8c, 0x21, 0xca, 0x0b, 0x0b, 0x8a, 0x64, 0x31, 0x96, 0x51,
	0x7d, 0x09, 0xbb, 0x7e, 0xd9, 0x3a, 0x68, 0x6b, 0x99, 0x3f, 0xa7, 0xa6, 0xf1, 0xe8, 0x5f, 0x8e,
	0xb4, 0x3b, 0x8e, 0x4b, 0x37, 0x5b, 0x35, 0xa3, 0x8e, 0x3d, 0xa1, 0x96, 0xf8, 0x99, 0x23, 0xf6,
	0x96, 0x49, 0x77, 0x9b, 0x88, 0x44, 0x94, 0xc4, 0x92, 0x05, 0x4b, 0xb8, 0x7a, 0xc6, 0x39, 0xe4,
	0xe7, 0x00, 0x10, 0x0a, 0x03, 0x5a, 0x0d, 0xd5, 0xca, 0xf7, 0x15, 0xa4, 0xe2, 0x48, 0x49, 0x31,
	0xb8, 0x94, 0x46, 0x24, 0xa5, 0xf1, 0x24, 0x92, 0xb2, 0x7c, 0x53, 0xe4, 0x35, 0x1e, 0xe7, 0x25,
	0x62, 0xf5, 0xfd, 0x23, 0x4d, 0xb2, 0x86, 0xd9, 0x46, 0x08, 0x97, 0x2d, 0x30, 0x84, 0x7c, 0x9b,
	0xf3, 0x66, 0xbb, 0xf2, 0x4e, 0x0b, 0xde, 0x31, 0xce, 0x1b, 0x45, 0x72, 0xd6, 0x41, 0xe4, 0xdb,
	0x8c, 0xf3, 0x9d, 0x04, 0x46, 0x51, 0x13, 0xd7, 0x37, 0xab, 0x90, 0xb5, 0x2e, 0xdf, 0xcf, 0xa4,
	0x9c, 0x4a, 0x95, 0x92, 0xe9, 0xb8, 0x22, 0x78, 0x27, 0x04, 0x6f, 0x22, 0x38, 0xd4, 0xaf, 0x78,
	0x05, 0xfd, 0xb8, 0x78, 0x23, 0x2c, 0x94, 0x3b, 0x66, 0x21, 0xbb, 0xf7, 0x51, 0xcb, 0xe8, 0x3a,
	0x28, 0x5c, 0xe6, 0x27, 0x0b, 0x91, 0x26, 0xf6, 0x09, 0xd2, 0x3f, 0x67, 0x81, 0x1c, 0x83, 0x2c,
	0x48, 0x5d, 0xfc, 0xcf, 0x6e, 0x7f, 0x8d, 0xdd, 0x10, 0xe0, 0x5d, 0xaf, 0x06, 0x61, 0xe3, 0xf2,
	0xfd, 0xac, 0x39, 0xcb, 0x61, 0xe8, 0xcf, 0xb6, 0x76, 0xfb, 0x6a, 0x5a, 0x9c, 0xb6, 0x35, 0x39,
	0xe9, 0x3d, 0x46, 0xa5, 0x5b, 0x80, 0xad, 0x98, 0x21, 0x84, 0x9b, 0x66, 0x80, 0x72, 0xd1, 0x28,
	0xb1, 0x8f, 0xbe, 0x4a, 0x60, 0xa8, 0x42, 0x9c, 0x75, 0x0a, 0xb7, 0x90, 0x3c, 0x09, 0x06, 0x42,
	0x03, 0xa0, 0x80, 0xfb, 0xc5, 0x12, 0x2b, 0x79, 0x4f, 0x02, 0xff, 0x27, 0x5b, 0x17, 0xf5, 0xbe,
	0xc3, 0x7c, 0xac, 0x0a, 0x21, 0x72, 0x17, 0x1b, 0x4f, 0x7a, 0x1b, 0x90, 0xd1, 0x44, 0xbb, 0x89,
	0xa8, 0x49, 0x06, 0xd7, 0xa3, 0xa4, 0xe3, 0x4a, 0xbe, 0x49, 0x00, 0x54, 0x88, 0xf3, 0xd4, 0x27,
	0x1d, 0x6b, 0xf9, 0x20, 0x81, 0xb1, 0x96, 0xdf, 0x63, 0x35, 0x0f, 0x45, 0x35, 0x93, 0xbc, 0x9a,
	0x73, 0xf1, 0xbd, 0xd5, 0x73, 0x2d, 0x8e, 0x4e, 0x56, 0x94, 0x63, 0xe3, 0x2c, 0x92, 0x8f, 0x6b,
	0x7a, 0xc3, 0x4a, 0x5a, 0x85, 0xc1, 0x36, 0x22, 0xf4, 0xd2, 0x92, 0x1e, 0x81, 0x89, 0x33, 0x83,
	0x65, 0x23, 0x1f, 0x7b, 0xbc, 0xaa, 0xe1, 0xb2, 0x7a, 0xda, 0xd6, 0x94, 0x94, 0xe9, 0xe3, 0x20,
	0xdd, 0x1a, 0x4f, 0x24, 0xb3, 0xcc, 0xf6, 0xce, 0x64, 0x24, 0xce, 0x8e, 0x32, 0x2a, 0xbd, 0xcf,
	0x82, 0xbe, 0x0a, 0x71, 0xe4, 0xb7, 0x12, 0xb8, 0x91, 0xfe, 0xc5, 0xbb, 0x6b, 0xa4, 0x7f, 0x99,
	0x8d, 0xcb, 0xee, 0x34, 0xe5, 0x7e, 0xaf, 0x11, 0x51, 0x36, 0xf2, 0x2b, 0x30, 0x76, 0xfe, 0x06,
	0x9c, 0xed, 0x4a, 0x16, 0x63, 0x95, 0xd2, 0xd5, 0xb1, 0xf1, 0x91, 0xeb, 0xa0, 0x9f, 0x0f, 0x4b,
	0xa1, 0x43, 0x30, 0x43, 0x28, 0xc5, 0x6e, 0x88, 0x98, 0xf4, 0x05, 0x18, 0x8c, 0x7c, 0xab, 0x77,
	0x08, 0x12, 0x18, 0x65, 0xb6, 0x3b, 0x26, 0x49, 0x1d, 0xf9, 0xa7, 0x13, 0xb5, 0xc0, 0x74, 0xa4,
	0x3e, 0xe7, 0x85, 0xf2, 0xca, 0xc1, 0xb1, 0x2a, 0x1d, 0x1e, 0xab, 0xd2, 0xaf, 0x63, 0x55, 0xda,
	0x3f, 0x51, 0x33, 0x87, 0x27, 0x6a, 0xe6, 0xc7, 0x89, 0x9a, 0x79, 0x39, 0x97, 0x98, 0x86, 0x94,
	0x3f, 0x73, 0x3b, 0xf1, 0x13, 0x1b, 0x8c, 0xda, 0x00, 0xbb, 0x49, 0xef, 0xfd, 0x0e, 0x00, 0x00,
	0xff, 0xff, 0x8c, 0xa3, 0x43, 0xb8, 0xf9, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateFixedAmountPlan defines a method for creating a new fixed amount
	// farming plan
	CreateFixedAmountPlan(ctx context.Context, in *MsgCreateFixedAmountPlan, opts ...grpc.CallOption) (*MsgCreateFixedAmountPlanResponse, error)
	// CreateRatioPlan defines a method for creating a new ratio farming plan
	CreateRatioPlan(ctx context.Context, in *MsgCreateRatioPlan, opts ...grpc.CallOption) (*MsgCreateRatioPlanResponse, error)
	// Stake defines a method for staking coins into the farming plan
	Stake(ctx context.Context, in *MsgStake, opts ...grpc.CallOption) (*MsgStakeResponse, error)
	// Unstake defines a method for unstaking coins from the farming plan
	Unstake(ctx context.Context, in *MsgUnstake, opts ...grpc.CallOption) (*MsgUnstakeResponse, error)
	// harvest defines a method for claiming farming rewards
	Harvest(ctx context.Context, in *MsgHarvest, opts ...grpc.CallOption) (*MsgHarvestResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateFixedAmountPlan(ctx context.Context, in *MsgCreateFixedAmountPlan, opts ...grpc.CallOption) (*MsgCreateFixedAmountPlanResponse, error) {
	out := new(MsgCreateFixedAmountPlanResponse)
	err := c.cc.Invoke(ctx, "/cosmos.farming.v1beta1.Msg/CreateFixedAmountPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateRatioPlan(ctx context.Context, in *MsgCreateRatioPlan, opts ...grpc.CallOption) (*MsgCreateRatioPlanResponse, error) {
	out := new(MsgCreateRatioPlanResponse)
	err := c.cc.Invoke(ctx, "/cosmos.farming.v1beta1.Msg/CreateRatioPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Stake(ctx context.Context, in *MsgStake, opts ...grpc.CallOption) (*MsgStakeResponse, error) {
	out := new(MsgStakeResponse)
	err := c.cc.Invoke(ctx, "/cosmos.farming.v1beta1.Msg/Stake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Unstake(ctx context.Context, in *MsgUnstake, opts ...grpc.CallOption) (*MsgUnstakeResponse, error) {
	out := new(MsgUnstakeResponse)
	err := c.cc.Invoke(ctx, "/cosmos.farming.v1beta1.Msg/Unstake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Harvest(ctx context.Context, in *MsgHarvest, opts ...grpc.CallOption) (*MsgHarvestResponse, error) {
	out := new(MsgHarvestResponse)
	err := c.cc.Invoke(ctx, "/cosmos.farming.v1beta1.Msg/Harvest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateFixedAmountPlan defines a method for creating a new fixed amount
	// farming plan
	CreateFixedAmountPlan(context.Context, *MsgCreateFixedAmountPlan) (*MsgCreateFixedAmountPlanResponse, error)
	// CreateRatioPlan defines a method for creating a new ratio farming plan
	CreateRatioPlan(context.Context, *MsgCreateRatioPlan) (*MsgCreateRatioPlanResponse, error)
	// Stake defines a method for staking coins into the farming plan
	Stake(context.Context, *MsgStake) (*MsgStakeResponse, error)
	// Unstake defines a method for unstaking coins from the farming plan
	Unstake(context.Context, *MsgUnstake) (*MsgUnstakeResponse, error)
	// harvest defines a method for claiming farming rewards
	Harvest(context.Context, *MsgHarvest) (*MsgHarvestResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateFixedAmountPlan(ctx context.Context, req *MsgCreateFixedAmountPlan) (*MsgCreateFixedAmountPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFixedAmountPlan not implemented")
}
func (*UnimplementedMsgServer) CreateRatioPlan(ctx context.Context, req *MsgCreateRatioPlan) (*MsgCreateRatioPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRatioPlan not implemented")
}
func (*UnimplementedMsgServer) Stake(ctx context.Context, req *MsgStake) (*MsgStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stake not implemented")
}
func (*UnimplementedMsgServer) Unstake(ctx context.Context, req *MsgUnstake) (*MsgUnstakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unstake not implemented")
}
func (*UnimplementedMsgServer) Harvest(ctx context.Context, req *MsgHarvest) (*MsgHarvestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Harvest not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateFixedAmountPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateFixedAmountPlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateFixedAmountPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.farming.v1beta1.Msg/CreateFixedAmountPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateFixedAmountPlan(ctx, req.(*MsgCreateFixedAmountPlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateRatioPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateRatioPlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateRatioPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.farming.v1beta1.Msg/CreateRatioPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateRatioPlan(ctx, req.(*MsgCreateRatioPlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Stake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStake)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Stake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.farming.v1beta1.Msg/Stake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Stake(ctx, req.(*MsgStake))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Unstake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnstake)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Unstake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.farming.v1beta1.Msg/Unstake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Unstake(ctx, req.(*MsgUnstake))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Harvest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgHarvest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Harvest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cosmos.farming.v1beta1.Msg/Harvest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Harvest(ctx, req.(*MsgHarvest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cosmos.farming.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFixedAmountPlan",
			Handler:    _Msg_CreateFixedAmountPlan_Handler,
		},
		{
			MethodName: "CreateRatioPlan",
			Handler:    _Msg_CreateRatioPlan_Handler,
		},
		{
			MethodName: "Stake",
			Handler:    _Msg_Stake_Handler,
		},
		{
			MethodName: "Unstake",
			Handler:    _Msg_Unstake_Handler,
		},
		{
			MethodName: "Harvest",
			Handler:    _Msg_Harvest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tendermint/farming/v1beta1/tx.proto",
}

func (m *MsgCreateFixedAmountPlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateFixedAmountPlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateFixedAmountPlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EpochAmount) > 0 {
		for iNdEx := len(m.EpochAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EpochAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTx(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintTx(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	if len(m.StakingCoinWeights) > 0 {
		for iNdEx := len(m.StakingCoinWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakingCoinWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FarmingPoolAddress) > 0 {
		i -= len(m.FarmingPoolAddress)
		copy(dAtA[i:], m.FarmingPoolAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FarmingPoolAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateFixedAmountPlanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateFixedAmountPlanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateFixedAmountPlanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateRatioPlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateRatioPlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateRatioPlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.EpochRatio.Size()
		i -= size
		if _, err := m.EpochRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintTx(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x22
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintTx(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x1a
	if len(m.StakingCoinWeights) > 0 {
		for iNdEx := len(m.StakingCoinWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakingCoinWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FarmingPoolAddress) > 0 {
		i -= len(m.FarmingPoolAddress)
		copy(dAtA[i:], m.FarmingPoolAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FarmingPoolAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateRatioPlanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateRatioPlanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateRatioPlanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgStake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakingCoins) > 0 {
		for iNdEx := len(m.StakingCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakingCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Farmer) > 0 {
		i -= len(m.Farmer)
		copy(dAtA[i:], m.Farmer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Farmer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStakeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStakeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStakeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnstake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnstake) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnstake) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnstakingCoins) > 0 {
		for iNdEx := len(m.UnstakingCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnstakingCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Farmer) > 0 {
		i -= len(m.Farmer)
		copy(dAtA[i:], m.Farmer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Farmer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnstakeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnstakeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnstakeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgHarvest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgHarvest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgHarvest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakingCoinDenoms) > 0 {
		for iNdEx := len(m.StakingCoinDenoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StakingCoinDenoms[iNdEx])
			copy(dAtA[i:], m.StakingCoinDenoms[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.StakingCoinDenoms[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Farmer) > 0 {
		i -= len(m.Farmer)
		copy(dAtA[i:], m.Farmer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Farmer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgHarvestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgHarvestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgHarvestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateFixedAmountPlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FarmingPoolAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.StakingCoinWeights) > 0 {
		for _, e := range m.StakingCoinWeights {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovTx(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovTx(uint64(l))
	if len(m.EpochAmount) > 0 {
		for _, e := range m.EpochAmount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgCreateFixedAmountPlanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateRatioPlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FarmingPoolAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.StakingCoinWeights) > 0 {
		for _, e := range m.StakingCoinWeights {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovTx(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovTx(uint64(l))
	l = m.EpochRatio.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCreateRatioPlanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgStake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Farmer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.StakingCoins) > 0 {
		for _, e := range m.StakingCoins {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgStakeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnstake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Farmer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.UnstakingCoins) > 0 {
		for _, e := range m.UnstakingCoins {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUnstakeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgHarvest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Farmer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.StakingCoinDenoms) > 0 {
		for _, s := range m.StakingCoinDenoms {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgHarvestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateFixedAmountPlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateFixedAmountPlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateFixedAmountPlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmingPoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FarmingPoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingCoinWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingCoinWeights = append(m.StakingCoinWeights, types.DecCoin{})
			if err := m.StakingCoinWeights[len(m.StakingCoinWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochAmount = append(m.EpochAmount, types.Coin{})
			if err := m.EpochAmount[len(m.EpochAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateFixedAmountPlanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateFixedAmountPlanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateFixedAmountPlanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateRatioPlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateRatioPlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateRatioPlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmingPoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FarmingPoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingCoinWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingCoinWeights = append(m.StakingCoinWeights, types.DecCoin{})
			if err := m.StakingCoinWeights[len(m.StakingCoinWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateRatioPlanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateRatioPlanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateRatioPlanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Farmer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Farmer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingCoins = append(m.StakingCoins, types.Coin{})
			if err := m.StakingCoins[len(m.StakingCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStakeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStakeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStakeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnstake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnstake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnstake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Farmer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Farmer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakingCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnstakingCoins = append(m.UnstakingCoins, types.Coin{})
			if err := m.UnstakingCoins[len(m.UnstakingCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnstakeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnstakeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnstakeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgHarvest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgHarvest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgHarvest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Farmer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Farmer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingCoinDenoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingCoinDenoms = append(m.StakingCoinDenoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgHarvestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgHarvestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgHarvestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
